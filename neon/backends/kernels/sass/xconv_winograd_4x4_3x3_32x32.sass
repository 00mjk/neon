
# Copyright 2016 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[-
our $type;
our $dtype        = $type eq 'h' ?        '.U16' :    '';
our $convert_in   = $type eq 'h' ? 'F2F.F32.F16' :    '';
our $convert_out  = $type eq 'h' ? 'F2F.F16.F32' :    '';
our $dtype_shift  = $type eq 'h' ?           '1' :   '2';
our $dtype_size   = $type eq 'h' ?           '2' :   '4';
our $vec_size     = $type eq 'h' ?          '64' : '128';
sub dtype       { return $dtype;       }
sub dtype_shift { return $dtype_shift; }
sub vec_size    { return $vec_size;    }
-]

<CONSTANT_MAPPING>

    addr_zero   : 4x<32*36*2*4>
    addr_idx_Y  : 4x<32*36*2*4 + 4>
    addr_idx_X  : 4x<32*36*2*4 + 5>
    addr_idx_K  : 4x<32*36*2*4 + 6>

    param_Sum[0]         : c[0x0][0x140]
    param_Sum[1]         : c[0x0][0x144]
    param_O[0]           : c[0x0][0x148]
    param_O[1]           : c[0x0][0x14c]
    param_I[0]           : c[0x0][0x150]
    param_I[1]           : c[0x0][0x154]
    param_F[0]           : c[0x0][0x158]
    param_F[1]           : c[0x0][0x15c]
    param_alpha          : c[0x0][0x160]
    param_beta           : c[0x0][0x164]
    param_flags          : c[0x0][0x168]
    param_C              : c[0x0][0x16c]
    param_K              : c[0x0][0x170]
    param_N              : c[0x0][0x174]
    param_YXk            : c[0x0][0x178]
    param_Xk             : c[0x0][0x17c]
    param_k              : c[0x0][0x180]
    param_magic_YXk      : c[0x0][0x184]
    param_shift_YXk      : c[0x0][0x188]
    param_magic_Xk       : c[0x0][0x18c]
    param_shift_Xk       : c[0x0][0x190]
    param_magic_k        : c[0x0][0x194]
    param_shift_k        : c[0x0][0x198]
    param_C_1152         : c[0x0][0x19c]
    param_GXS_C_1152     : c[0x0][0x1a0]
    param_GYS_GXS_C_1152 : c[0x0][0x1a4]
    param_P              : c[0x0][0x1a8]
    param_Q              : c[0x0][0x1ac]
    param_QN             : c[0x0][0x1b0]
    param_PQN            : c[0x0][0x1b4]
    param_Np             : c[0x0][0x1b8]
    param_QNp            : c[0x0][0x1bc]
    param_QN3p           : c[0x0][0x1c0]
    param_PQN1_QN3p      : c[0x0][0x1c4]
    param_PQN15_QN3p     : c[0x0][0x1c8]
    param_maskN          : c[0x0][0x1cc]
    param_shiftX         : c[0x0][0x1d0]
    param_shiftY         : c[0x0][0x1d4]
    param_superX         : c[0x0][0x1d8]
    param_superY         : c[0x0][0x1dc]

</CONSTANT_MAPPING>

<REGISTER_MAPPING>

       0-63 : czero<00-63>

     3, 2,11,10 : clx<0-3>y0
     7, 6,15,14 : clx<0-3>y1
     1, 0, 9, 8 : clx<0-3>y2
     5, 4,13,12 : clx<0-3>y3
    19,18,27,26 : clx<0-3>y4
    23,22,31,30 : clx<0-3>y5
    17,16,25,24 : clx<0-3>y6
    21,20,29,28 : clx<0-3>y7

      32-43 : jl0Ix<0-3>, jl0Fy<0-7>
      44-51 : jl1Ix<0-3>, jl1Fy<4-7>
      36-39 : jl1Fy<0-3>

      52-87 : T0<0-3>, T1<0-3>, T2<0-3>, T3<0-3>, T4<0-3>, T5<0-3>, T6<0-3>, T7<0-3>, T8<0-3>
      88-89 : track<0-1>
      90-91 ~ writeS

      32-39 ~ partialC, idx_K, idx_Y, idx_X
      40-86 ~ idx_KYXk, idx_YXk, idx_Xk, idx_k, div<1-3>, magic_YXk, negYXk, magic_Xk, negXk, tid32_2, tid1, tid31, c, offset, idx_N

      32-39 : shuffle16_x<0-3>y0, shuffle16_x<0-3>y1
      48-91 ~ Tid, Tid1, Tid32_2, write16Cs, alpha16


     3, 2,11,10,19,18,27,26 : ccx<0-7>y0
     7, 6,15,14,23,22,31,30 : ccx<0-7>y1
     1, 0, 9, 8,17,16,25,24 : ccx<0-7>y2
     5, 4,13,12,21,20,29,28 : ccx<0-7>y3
    35,34,43,42,51,50,59,58 : ccx<0-7>y4
    39,38,47,46,55,54,63,62 : ccx<0-7>y5
    33,32,41,40,49,48,57,56 : ccx<0-7>y6
    37,36,45,44,53,52,61,60 : ccx<0-7>y7

      64-79 : jc0Ix<0-7>, jc0Fy<0-7>
      80-91 : jc1Ix<4-7>, jc1Fy<0-7>
      64-67 : jc1Ix<0-3>

      64-86 ~ tid16, tid_1, tid128

         87 = tid
      92-95 ~ C, swapBuf, readFs, readIs

      64-87 ~ tid_128, tid_32, tid_31, tid_16, Tid_1, idxN, idxX, idxY, idxK, readFs2, readIs2, flags, offsetO, p, q, n, z<1-3>, mask_q
      82-87 : out1<0-1>, out2<0-1>, out3<0-1>
      88-89 : out0<0-1>
      90-95 ~ alpha, beta, writeCs, readCs, k, preds

      64-79 : shuffle_x<0-7>y0, shuffle_x<0-7>y1

      // t00 80      r00 78
      // t10 m10     r01 w01
      // t20 m20     r02 w02
      // t30 m30     r03 w03
      // w00 m00     s00 w00
      // w30 m40     s01 w01
      // w10 m10     s02 w02
      // w20 m20     s03 w04

      78 = t0<0-5>, r<0-3>0

       3, 2,11,10,19,18 : m<0-5>0
       1, 9, 0, 8,17,16 : m<0-5>1
      27,26,25,24,64,65 : m<0-5>2
                2,11,10 : t10, t20, t30
                9, 0, 8 : t11, t21, t31
               26,25,24 : t12, t22, t32
             3, 2,11,19 : w00, w10, w20, w30
             1, 9, 0,17 : w01, w11, w21, w31
            27,26,25,64 : w02, w12, w22, w32

      66,67,68,69,70,71 : m<0-5>3
      72,73,74,75,76,77 : m<0-5>4
       8,24,10,65,16,18 : m<0-5>5
               67,68,69 : t13, t23, t33
               73,74,75 : t14, t24, t34
               24,10,65 : t15, t25, t35
            66,67,68,70 : w03, w13, w23, w33
            72,73,74,76 : w04, w14, w24, w34
             8,24,10,16 : w05, w15, w25, w35

                1,27,66 : r01, r02, r03
                9,26,67 : r11, r12, r13
                0,25,68 : r21, r22, r23
               17,64,70 : r31, r32, r33
             3, 1,27,72 : s00, s01, s02, s03
             2, 9,26,73 : s10, s11, s12, s13
            11, 0,25,74 : s20, s21, s22, s23
            19,17,64,76 : s30, s31, s32, s33

            18,65,75,77 ~ sum<0-3>
                  80-81 : Sum<0-1>

             8,10,16,18 ~ b0<0-3>
            24,65,66,67 ~ b1<0-3>
            68,69,70,71 ~ b2<0-3>
            75,77,78,79 ~ b3<0-3>

</REGISTER_MAPPING>

--:-:-:-:0      MOV C,   param_C;
--:-:1:-:1      S2R tid, SR_TID.X;
--:-:-:-:1      MOV swapBuf, 4x<32*36*2*2>;
01:-:-:-:0      ISETP.GE.AND P0, PT, tid, 128, PT;
--:-:-:-:1      STS.128 [addr_zero], RZ;
--:-:-:Y:c      LOP.AND partialC, C, 1;
--:-:-:-:0      IADD C, C, partialC;
--:-:-:-:5  @P0 BRA.U COMPUTE_SETUP;

##############################################################
LOAD_SETUP:

--:-:1:-:1      S2R idx_KYXk, SR_CTAID.X;

<SCHEDULE_BLOCK>

[+ join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..7; +]

--:-:-:-:1      ISETP.EQ.AND P0, PT, tid, RZ, PT;
--:-:-:-:1      ISETP.GE.AND P1, PT, tid, 64, PT;

// idx_K   = idx_KYXk / blk_YXk
--:-:-:-:1      MOV  magic_YXk, param_magic_YXk;
--:-:-:-:1      IADD negYXk, RZ, -param_YXk;
--:-:-:-:1      ISETP.NE.AND P2, PT, magic_YXk, 1, PT;
01:-:-:-:1  @P2 XMAD     div1, idx_KYXk,    magic_YXk,    RZ;
--:-:-:-:1  @P2 XMAD     div2, idx_KYXk,    magic_YXk.H1, RZ;
--:-:-:-:1  @P2 XMAD     div3, idx_KYXk.H1, magic_YXk.H1, RZ;
--:-:-:-:1  @P2 XMAD.CHI div1, idx_KYXk.H1, magic_YXk,    div1;
--:-:-:-:1  @P2 IADD3.RS idx_K, div1, div2, div3;
--:-:-:-:1  @P2 SHR.U32  idx_K, idx_K,    param_shift_YXk;
--:-:-:-:1 @!P2 SHR.U32  idx_K, idx_KYXk, param_shift_YXk;

// idx_YXk = idx_KYXk % blk_YXk
--:-:-:-:1      XMAD.LO2 idx_YXk, negYXk, idx_K, idx_KYXk;

// idx_Y   = idx_YXk / blk_Xk
--:-:-:-:1      MOV  magic_Xk, param_magic_Xk;
--:-:-:-:1      IADD negXk, RZ, -param_Xk;
--:-:-:-:1      ISETP.NE.AND P3, PT, magic_Xk, 1, PT;
--:-:-:-:1  @P3 XMAD     div1, idx_YXk,    magic_Xk,    RZ;
--:-:-:-:1  @P3 XMAD     div2, idx_YXk,    magic_Xk.H1, RZ;
--:-:-:-:1  @P3 XMAD     div3, idx_YXk.H1, magic_Xk.H1, RZ;
--:-:-:-:1  @P3 XMAD.CHI div1, idx_YXk.H1, magic_Xk,    div1;
--:-:-:-:1  @P3 IADD3.RS idx_Y, div1, div2, div3;
--:-:-:-:1  @P3 SHR.U32  idx_Y, idx_Y,   param_shift_Xk;
--:-:-:-:1 @!P3 SHR.U32  idx_Y, idx_YXk, param_shift_Xk;

// idx_Xk  = idx_YXk % blk_Xk
--:-:-:-:1      XMAD.LO2 idx_Xk, negXk, idx_Y, idx_YXk;

// idx_X   = idx_Xk / blk_k
// idx_k   = idx_Xk % blk_k
--:-:-:-:1      XMAD    idx_X,  idx_Xk, param_magic_k, RZ;
--:-:-:-:1      SHR.U32 idx_X,  idx_X,  param_shift_k;
--:-:-:-:1      XMAD    idx_k,  idx_X,  param_k, RZ;
--:-:-:-:1      IADD    idx_k, -idx_k,  idx_Xk;

// idx_K = idx_K * blk_k + idx_k
--:-:-:-:1      XMAD idx_K, idx_K, param_k, idx_k;

--:-:-:-:1  @P0 STS [addr_idx_Y], idx_Y;
--:-:-:-:1  @P0 STS [addr_idx_X], idx_X;
--:-:-:-:1  @P0 STS [addr_idx_K], idx_K;


--:-:-:-:1      LOP.AND  tid32_2,  tid,    -32;
--:-:-:-:1      SHR.U32  tid32_2,  tid32_2, 2;

// readIs = ((tid & -32) >> 2) | ((tid >> 1) & 7)
--:-:-:-:1      BFE.U32 readIs, tid,    0x301; // 3 bits at position 1
--:-:-:-:1      LOP.OR  readIs, readIs, tid32_2;
--:-:-:-:1      SHL     readIs, readIs, 4;

// readFs = ((tid & -32) >> 2) | ((tid & 16) >> 3) | (tid & 1)
--:-:-:-:1      LOP.AND tid1,   tid,    1;
--:-:-:-:1      LOP.AND readFs, tid,    16;
--:-:-:-:1      SHR.U32 readFs, readFs, 3;
--:-:-:-:1      IADD3   readFs, readFs, tid1, tid32_2;
--:-:-:-:1      ISCADD  readFs, readFs, 4x<32*36*2>, 4;

// c = (tid & 63) >> 5
--:-:-:-:1      BFE.U32 c, tid, 0x105; // 2 bits at position 5

// partialC  = (2 - partialC)
// P6        = c < partialC
// partialC *= 32*36 * itemsize
--:-:-:-:1      IADD partialC, -partialC, 2;
--:-:-:-:1      ISETP.LT.AND P6, PT, c, partialC, PT;
--:-:-:-:1      XMAD partialC,  partialC, 1x<32*36 * $dtype_size>, RZ;

// writeS = (c*32*36 + (tid & 31)*4)*4
--:-:-:-:1      LOP.AND tid31, tid, 31;
--:-:-:-:1      SHL writeS, tid31, 4;
--:-:-:-:1      XMAD writeS, c, 4x<32*36>, writeS;

// offset = c*32*36 + tid31*4
--:-:-:-:1      SHL tid31, tid31, 2;
--:-:-:-:1      XMAD offset, c, 1x<32*36>, tid31;


// P5 = C > 2
--:-:-:-:1      ISETP.GT.AND P5, PT, C, 2, PT;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P1 BRA.U FILTER_SETUP;

##############################################################
IMAGE_SETUP:

--:-:1:-:1      S2R idx_N, SR_CTAID.Y;
<SCHEDULE_BLOCK>
// (GN,GYS,GXS,C,6,6,32)
// offset += (idx_N*GYS*GXS*C*32*36 + idx_Y*GXS*C*32*36 + idx_X*C*32*36) * itemsize;
--:-:-:-:1      XMAD.LO2C offset, idx_X, param_C_1152, offset;
--:-:-:-:1      XMAD.LO2C offset, idx_Y, param_GXS_C_1152, offset;
01:-:-:-:1      XMAD.LO2C offset, idx_N, param_GYS_GXS_C_1152, offset;
--:-:-:-:1      LEA      track0.CC, offset, param_I[0],     [+ dtype_shift() +];
--:-:-:-:0      LEA.HI.X track1,    offset, param_I[1], RZ, [+ dtype_shift() +];
</SCHEDULE_BLOCK>

--:-:-:-:5      BRA.U LOAD;

##############################################################
FILTER_SETUP:

<SCHEDULE_BLOCK>
// writeS += 32*36*2*4
--:-:-:-:1      IADD writeS, writeS, 4x<32*36*2>;

// (kBlks,C,6,6,32)
// offset += (idx_K*C*32*36) * itemsize;
--:-:-:-:1      XMAD.LO2C offset, idx_K, param_C_1152, offset;
--:-:-:-:1      LEA      track0.CC, offset, param_F[0],     [+ dtype_shift() +];
--:-:-:-:2      LEA.HI.X track1,    offset, param_F[1], RZ, [+ dtype_shift() +];
</SCHEDULE_BLOCK>

##############################################################
LOAD:

--:-:-:-:1  @P6 LDG.E.[+ vec_size() +] T0, [track + 4x<0*32 * $dtype_size>];
--:-:-:-:1  @P6 LDG.E.[+ vec_size() +] T1, [track + 4x<1*32 * $dtype_size>];
--:-:2:-:1  @P6 LDG.E.[+ vec_size() +] T2, [track + 4x<2*32 * $dtype_size>];

--:-:-:-:1 @!P6 LDS.U.[+ vec_size() +] T0, [addr_zero];
--:-:-:-:1 @!P6 LDS.U.[+ vec_size() +] T1, [addr_zero];
--:-:2:-:1 @!P6 LDS.U.[+ vec_size() +] T2, [addr_zero];

--:-:-:-:1  @P6 LDG.E.[+ vec_size() +] T3, [track + 4x<3*32 * $dtype_size>];
--:-:-:-:1  @P6 LDG.E.[+ vec_size() +] T4, [track + 4x<4*32 * $dtype_size>];
--:-:3:-:1  @P6 LDG.E.[+ vec_size() +] T5, [track + 4x<5*32 * $dtype_size>];

--:-:-:-:1 @!P6 LDS.U.[+ vec_size() +] T3, [addr_zero];
--:-:-:-:1 @!P6 LDS.U.[+ vec_size() +] T4, [addr_zero];
--:-:3:-:1 @!P6 LDS.U.[+ vec_size() +] T5, [addr_zero];

--:-:-:-:1  @P6 LDG.E.[+ vec_size() +] T6, [track + 4x<6*32 * $dtype_size>];
--:-:-:-:1  @P6 LDG.E.[+ vec_size() +] T7, [track + 4x<7*32 * $dtype_size>];
--:-:4:-:1  @P6 LDG.E.[+ vec_size() +] T8, [track + 4x<8*32 * $dtype_size>];

--:-:-:-:1 @!P6 LDS.U.[+ vec_size() +] T6, [addr_zero];
--:-:-:-:1 @!P6 LDS.U.[+ vec_size() +] T7, [addr_zero];
--:-:4:-:1 @!P6 LDS.U.[+ vec_size() +] T8, [addr_zero];

[+
    our $convert_in;
    return $convert_in ? q{

02:-:-:-:1      F2F.F32.F16 T03, T01.H1;
--:-:-:-:1      F2F.F32.F16 T02, T01.H0;
--:-:-:-:1      F2F.F32.F16 T01, T00.H1;
--:-:2:-:1      F2F.F32.F16 T00, T00.H0;

--:-:-:-:1      F2F.F32.F16 T13, T11.H1;
--:-:-:-:1      F2F.F32.F16 T12, T11.H0;
--:-:-:-:1      F2F.F32.F16 T11, T10.H1;
--:-:5:-:1      F2F.F32.F16 T10, T10.H0;

--:-:-:-:1      F2F.F32.F16 T23, T21.H1;
--:-:-:-:1      F2F.F32.F16 T22, T21.H0;
--:-:-:-:1      F2F.F32.F16 T21, T20.H1;
--:-:6:-:1      F2F.F32.F16 T20, T20.H0;

02:-:-:-:1      STS.128 [writeS + 4x<0*32*4>], T0;

04:-:-:-:1      F2F.F32.F16 T33, T31.H1;
--:-:-:-:1      F2F.F32.F16 T32, T31.H0;
--:-:-:-:1      F2F.F32.F16 T31, T30.H1;
--:-:3:-:1      F2F.F32.F16 T30, T30.H0;

10:-:-:-:1      STS.128 [writeS + 4x<1*32*4>], T1;

--:-:-:-:1      F2F.F32.F16 T43, T41.H1;
--:-:-:-:1      F2F.F32.F16 T42, T41.H0;
--:-:-:-:1      F2F.F32.F16 T41, T40.H1;
--:-:5:-:1      F2F.F32.F16 T40, T40.H0;

20:-:-:-:1      STS.128 [writeS + 4x<2*32*4>], T2;

--:-:-:-:1      F2F.F32.F16 T53, T51.H1;
--:-:-:-:1      F2F.F32.F16 T52, T51.H0;
--:-:-:-:1      F2F.F32.F16 T51, T50.H1;
--:-:6:-:1      F2F.F32.F16 T50, T50.H0;

04:-:-:-:1      STS.128 [writeS + 4x<3*32*4>], T3;

08:-:-:-:1      F2F.F32.F16 T63, T61.H1;
--:-:-:-:1      F2F.F32.F16 T62, T61.H0;
--:-:-:-:1      F2F.F32.F16 T61, T60.H1;
--:-:4:-:1      F2F.F32.F16 T60, T60.H0;

10:-:-:-:1      STS.128 [writeS + 4x<4*32*4>], T4;

--:-:-:-:1      F2F.F32.F16 T73, T71.H1;
--:-:-:-:1      F2F.F32.F16 T72, T71.H0;
--:-:-:-:1      F2F.F32.F16 T71, T70.H1;
--:-:5:-:1      F2F.F32.F16 T70, T70.H0;

20:-:-:-:1      STS.128 [writeS + 4x<5*32*4>], T5;

--:-:-:-:1      F2F.F32.F16 T83, T81.H1;
--:-:-:-:1      F2F.F32.F16 T82, T81.H0;
--:-:-:-:1      F2F.F32.F16 T81, T80.H1;
--:-:6:-:1      F2F.F32.F16 T80, T80.H0;

08:-:-:-:1      STS.128 [writeS + 4x<6*32*4>], T6;
10:-:-:-:1      STS.128 [writeS + 4x<7*32*4>], T7;
20:-:-:-:1      STS.128 [writeS + 4x<8*32*4>], T8;

    } : q{
02:-:-:-:1      STS.128 [writeS + 4x<0*32*4>], T0;
--:-:-:-:1      STS.128 [writeS + 4x<1*32*4>], T1;
--:-:-:-:1      STS.128 [writeS + 4x<2*32*4>], T2;
04:-:-:-:1      STS.128 [writeS + 4x<3*32*4>], T3;
--:-:-:-:1      STS.128 [writeS + 4x<4*32*4>], T4;
--:-:-:-:1      STS.128 [writeS + 4x<5*32*4>], T5;
08:-:-:-:1      STS.128 [writeS + 4x<6*32*4>], T6;
--:-:-:-:1      STS.128 [writeS + 4x<7*32*4>], T7;
--:-:-:-:1      STS.128 [writeS + 4x<8*32*4>], T8;
    };
+]

--:-:-:-:0      IADD   track0.CC, track0, partialC;

--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      IADD writeS, writeS, swapBuf;
--:-:-:-:1      IADD swapBuf, RZ, -swapBuf;

--:-:-:-:0      IADD.X track1,    track1, RZ;

--:-:-:-:1      LDS.U.128 jl0Fy0, [readFs + 4x<0*32*36 + 00>];
--:-:-:-:1      LDS.U.128 jl0Ix0, [readIs + 4x<0*32*36 + 00>];
--:-:1:-:1      LDS.U.128 jl0Fy4, [readFs + 4x<0*32*36 + 16>];

--:-:-:-:1  @P5 LDG.E.[+ vec_size() +] T0, [track + 4x<0*32 * $dtype_size>];
--:-:-:-:1  @P5 LDG.E.[+ vec_size() +] T1, [track + 4x<1*32 * $dtype_size>];
--:-:2:-:1  @P5 LDG.E.[+ vec_size() +] T2, [track + 4x<2*32 * $dtype_size>];
--:-:-:-:1  @P5 LDG.E.[+ vec_size() +] T3, [track + 4x<3*32 * $dtype_size>];
--:-:-:-:1  @P5 LDG.E.[+ vec_size() +] T4, [track + 4x<4*32 * $dtype_size>];
--:-:3:-:1  @P5 LDG.E.[+ vec_size() +] T5, [track + 4x<5*32 * $dtype_size>];
--:-:-:-:1  @P5 LDG.E.[+ vec_size() +] T6, [track + 4x<6*32 * $dtype_size>];
--:-:-:-:1  @P5 LDG.E.[+ vec_size() +] T7, [track + 4x<7*32 * $dtype_size>];
--:6:4:-:1  @P5 LDG.E.[+ vec_size() +] T8, [track + 4x<8*32 * $dtype_size>];

--:-:-:-:5      BRA.U LOAD_LOOP;

##############################################################

COMPUTE_SETUP:

<SCHEDULE_BLOCK>
[+ join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..15; +]

--:-:-:-:1      IADD tid128, tid, -128;

// readIs = ((tid & -16) >> 1) | ((tid >> 1) & 3)
// readFs = ((tid & -16) >> 1) | ((tid &  8) >> 2) | (tid & 1)
--:-:-:-:1      LOP.AND  tid16,  tid128, -16;
--:-:-:-:1      SHR.U32  tid16,  tid16,   1;

--:-:-:-:1      BFE.U32  readIs, tid128, 0x201; // 2 bits at position 1
--:-:-:-:1      LOP.OR   readIs, readIs, tid16;
--:-:-:-:1      ISCADD   readIs, readIs, 4x<32*4>, 4;

--:-:-:-:1      LOP.AND  tid_1,  tid128, 1;
--:-:-:-:1      LOP.AND  readFs, tid128, 8;
--:-:-:-:1      SHR.U32  readFs, readFs, 2;
--:-:-:-:1      IADD3    readFs, readFs, tid16, tid_1;
--:-:-:-:0      ISCADD   readFs, readFs, 4x<32*4 + 32*36*2>, 4;
</SCHEDULE_BLOCK>

--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:1      LDS.U.128 jc0Ix0, [readIs + 4x<0*32*36 + 00>];
--:-:-:-:1      LDS.U.128 jc0Fy0, [readFs + 4x<0*32*36 + 00>];
--:-:-:-:1      LDS.U.128 jc0Ix4, [readIs + 4x<0*32*36 + 16>];
--:-:1:-:2      LDS.U.128 jc0Fy4, [readFs + 4x<0*32*36 + 16>];

COMPUTE_LOOP:
[+
    my %insert = (

        j0c33 => "--:-:-:-:1      ISETP.GT.AND P0, PT, C, 2, PT;\n" .
                 "--:-:-:-:1      IADD C, C, -2;\n",

        j0c62 => "02:-:-:Y:5      BAR.SYNC 0;\n" .
                 "--:-:-:-:1      IADD readFs, readFs, swapBuf;\n" .
                 "--:-:-:-:1      IADD readIs, readIs, swapBuf;\n" .
                 "--:-:-:-:1      IADD swapBuf, RZ,   -swapBuf;\n",

        j1c63 => "--:-:-:Y:5  \@P0 BRA.U COMPUTE_LOOP;\n" .
                 "--:-:-:Y:5      BRA.U COMPUTE_FINISH;\n",
    );
    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    my @y = (0,1,4,5);
    foreach my $x (0,2,4,6)
    {
        foreach my $y (@y)
        {
            push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
        }
        @y = reverse @y;
    }
    my $out;
    foreach my $j (0 .. 1)
    {
        my $odd    = $j;
        my $nOdd   = 1 - $j;
        my $rsPred = $j == 1 ? '@P0' : '   ';
        my $bar    = $j == 0 ? '2' : '-';

        $insert{"j${j}c0"}  = sprintf "--:-:-:-:1  %s LDS.U.128 jc%dFy4, [readFs + 4x<%d*32*36 + 16>];\n", $rsPred, $nOdd, $nOdd;
        $insert{"j${j}c2"}  = sprintf "--:-:-:-:1  %s LDS.U.128 jc%dIx4, [readIs + 4x<%d*32*36 + 16>];\n", $rsPred, $nOdd, $nOdd;
        $insert{"j${j}c4"}  = sprintf "--:-:-:-:1  %s LDS.U.128 jc%dFy0, [readFs + 4x<%d*32*36 + 00>];\n", $rsPred, $nOdd, $nOdd;

        $insert{"j${j}c31"} = sprintf "--:%s:1:-:1  %s LDS.U.128 jc%dIx0, [readIs + 4x<%d*32*36 + 00>];\n", $bar, $rsPred, $nOdd, $nOdd;


        foreach my $c (0 .. 63)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';

            my $stall  = $ins =~ /^[^\n]*(?:LDS|I2I|I2F|F2I|F2F|LDG|STS|BAR|BRA)/ ? 0 : 1;

            my $yield  = $c % 10 == 0 && $stall ? 'Y' : '-';

            my $wait   = $c == 0 ? '01' : '--';

            my $ctrl   = "$wait:-:-:$yield:$stall";

            $out .= sprintf "%s      FFMA ccx%dy%d, jc%dIx%d, jc%dFy%d, ccx%dy%d;\n%s", $ctrl,  $x,$y,  $odd,$x,  $odd,$y,  $x,$y,  $ins;
        }
    }
    return $out;
+]

LOAD_LOOP:
--:-:-:-:1      ISETP.GT.AND P0, PT, C, 2, PT;
20:-:-:-:1      IADD track0.CC, track0, 1x<32*36*2 * $dtype_size>;
--:-:-:-:1      ISETP.GT.AND P1, PT, C, 4, PT;
--:-:-:-:1      IADD C, C, -2;
[+
    our ($vec_size, $dtype_size, $convert_in);
    my %insert = (

        j0c3 => "--:-:-:-:1      IADD.X track1, track1, RZ;\n",

        j0c0  => "--:-:-:-:1      LDS.U.128 jl1Fy4, [readFs + 4x<1*32*36 + 16>];\n",
        j0c2  => "--:-:-:-:1      LDS.U.128 jl1Ix0, [readIs + 4x<1*32*36 + 00>];\n",
        j0c18 => "--:-:1:-:1      LDS.U.128 jl1Fy0, [readFs + 4x<1*32*36 + 00>];\n",

        j1c12 => "--:-:-:-:1  \@P0 LDS.U.128 jl0Fy4, [readFs + 4x<0*32*36 + 16>];\n",
        j1c14 => "--:-:-:-:1  \@P0 LDS.U.128 jl0Ix0, [readIs + 4x<0*32*36 + 00>];\n",
        j1c16 => "--:-:1:-:1  \@P0 LDS.U.128 jl0Fy0, [readFs + 4x<0*32*36 + 00>];\n",

        $convert_in ? (

            j0c1  => "02:-:-:-:1      F2F.F32.F16 T03, T01.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T02, T01.H0;\n",
            j0c4  => "--:-:-:-:1      F2F.F32.F16 T01, T00.H1;\n" .
                     "--:-:2:-:1      F2F.F32.F16 T00, T00.H0;\n",

            j0c5  => "--:-:-:-:1      F2F.F32.F16 T13, T11.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T12, T11.H0;\n",
            j0c6  => "--:-:-:-:1      F2F.F32.F16 T11, T10.H1;\n" .
                     "--:-:5:-:1      F2F.F32.F16 T10, T10.H0;\n",

            j0c7  => "--:-:-:-:1      F2F.F32.F16 T23, T21.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T22, T21.H0;\n",
            j0c8  => "--:-:-:-:1      F2F.F32.F16 T21, T20.H1;\n" .
                     "--:-:6:-:1      F2F.F32.F16 T20, T20.H0;\n",

            j0c9  => "02:2:-:-:1  \@P0 STS.128 [writeS + 4x<0*32*4>], T0;\n",
            j0c10 => "10:5:-:-:1  \@P0 STS.128 [writeS + 4x<1*32*4>], T1;\n",
            j0c11 => "20:6:-:-:1  \@P0 STS.128 [writeS + 4x<2*32*4>], T2;\n",

            j0c13 => "02:-:-:-:1  \@P1 LDG.E.$vec_size T0, [track + 4x<0*32 * $dtype_size>];\n",
            j0c14 => "10:-:-:-:1  \@P1 LDG.E.$vec_size T1, [track + 4x<1*32 * $dtype_size>];\n",
            j0c15 => "20:-:2:-:1  \@P1 LDG.E.$vec_size T2, [track + 4x<2*32 * $dtype_size>];\n",

            j0c16 => "04:-:-:-:1      F2F.F32.F16 T33, T31.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T32, T31.H0;\n",
            j0c17 => "--:-:-:-:1      F2F.F32.F16 T31, T30.H1;\n" .
                     "--:-:3:-:1      F2F.F32.F16 T30, T30.H0;\n",

            j0c19 => "--:-:-:-:1      F2F.F32.F16 T43, T41.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T42, T41.H0;\n",
            j0c20 => "--:-:-:-:1      F2F.F32.F16 T41, T40.H1;\n" .
                     "--:-:5:-:1      F2F.F32.F16 T40, T40.H0;\n",

            j0c21 => "--:-:-:-:1      F2F.F32.F16 T53, T51.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T52, T51.H0;\n",
            j0c22 => "--:-:-:-:1      F2F.F32.F16 T51, T50.H1;\n" .
                     "--:-:6:-:1      F2F.F32.F16 T50, T50.H0;\n",

            j0c23 => "04:3:-:-:1  \@P0 STS.128 [writeS + 4x<3*32*4>], T3;\n",
            j0c24 => "10:5:-:-:1  \@P0 STS.128 [writeS + 4x<4*32*4>], T4;\n",
            j0c25 => "20:6:-:-:1  \@P0 STS.128 [writeS + 4x<5*32*4>], T5;\n",

            j0c27 => "04:-:-:-:1  \@P1 LDG.E.$vec_size T3, [track + 4x<3*32 * $dtype_size>];\n",
            j0c28 => "10:-:-:-:1  \@P1 LDG.E.$vec_size T4, [track + 4x<4*32 * $dtype_size>];\n",
            j0c29 => "20:-:3:-:1  \@P1 LDG.E.$vec_size T5, [track + 4x<5*32 * $dtype_size>];\n",

            j0c30 => "08:-:-:-:1      F2F.F32.F16 T63, T61.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T62, T61.H0;\n",
            j0c31 => "--:-:-:-:1      F2F.F32.F16 T61, T60.H1;\n" .
                     "--:-:4:-:1      F2F.F32.F16 T60, T60.H0;\n",

            j1c0  => "--:-:-:-:1      F2F.F32.F16 T73, T71.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T72, T71.H0;\n",
            j1c1  => "--:-:-:-:1      F2F.F32.F16 T71, T70.H1;\n" .
                     "--:-:5:-:1      F2F.F32.F16 T70, T70.H0;\n",

            j1c2  => "--:-:-:-:1      F2F.F32.F16 T83, T81.H1;\n" .
                     "--:-:-:-:1      F2F.F32.F16 T82, T81.H0;\n",
            j1c3  => "--:-:-:-:1      F2F.F32.F16 T81, T80.H1;\n" .
                     "--:-:6:-:1      F2F.F32.F16 T80, T80.H0;\n",

            j1c4  => "08:4:-:-:1  \@P0 STS.128 [writeS + 4x<6*32*4>], T6;\n",
            j1c5  => "10:5:-:-:1  \@P0 STS.128 [writeS + 4x<7*32*4>], T7;\n",
            j1c6  => "20:6:-:-:1  \@P0 STS.128 [writeS + 4x<8*32*4>], T8;\n",

            j1c8  => "08:-:-:-:1  \@P1 LDG.E.$vec_size T6, [track + 4x<6*32 * $dtype_size>];\n",
            j1c9  => "10:-:-:-:1  \@P1 LDG.E.$vec_size T7, [track + 4x<7*32 * $dtype_size>];\n",
            j1c10 => "20:6:4:-:1  \@P1 LDG.E.$vec_size T8, [track + 4x<8*32 * $dtype_size>];\n",

        ) : (

            j0c6  => "02:-:-:-:1      STS.128 [writeS + 4x<0*32*4>], T0;\n",
            j0c8  => "--:-:-:-:1  \@P0 STS.128 [writeS + 4x<1*32*4>], T1;\n",
            j0c10 => "--:2:-:-:1  \@P0 STS.128 [writeS + 4x<2*32*4>], T2;\n",

            j0c12 => "02:-:-:-:1  \@P1 LDG.E.$vec_size T0, [track + 4x<0*32 * $dtype_size>];\n",
            j0c14 => "--:-:-:-:1  \@P1 LDG.E.$vec_size T1, [track + 4x<1*32 * $dtype_size>];\n",
            j0c16 => "--:-:2:-:1  \@P1 LDG.E.$vec_size T2, [track + 4x<2*32 * $dtype_size>];\n",

            j0c20 => "04:-:-:-:1  \@P0 STS.128 [writeS + 4x<3*32*4>], T3;\n",
            j0c22 => "--:-:-:-:1  \@P0 STS.128 [writeS + 4x<4*32*4>], T4;\n",
            j0c24 => "--:3:-:-:1  \@P0 STS.128 [writeS + 4x<5*32*4>], T5;\n",

            j0c26 => "04:-:-:-:1  \@P1 LDG.E.$vec_size T3, [track + 4x<3*32 * $dtype_size>];\n",
            j0c28 => "--:-:-:-:1  \@P1 LDG.E.$vec_size T4, [track + 4x<4*32 * $dtype_size>];\n",
            j0c30 => "--:-:3:-:1  \@P1 LDG.E.$vec_size T5, [track + 4x<5*32 * $dtype_size>];\n",

            j1c0  => "08:-:-:-:1  \@P0 STS.128 [writeS + 4x<6*32*4>], T6;\n",
            j1c2  => "--:-:-:-:1  \@P0 STS.128 [writeS + 4x<7*32*4>], T7;\n",
            j1c4  => "--:4:-:-:1  \@P0 STS.128 [writeS + 4x<8*32*4>], T8;\n",

            j1c6  => "08:-:-:-:1  \@P1 LDG.E.$vec_size T6, [track + 4x<6*32 * $dtype_size>];\n",
            j1c8  => "--:-:-:-:1  \@P1 LDG.E.$vec_size T7, [track + 4x<7*32 * $dtype_size>];\n",
            j1c10 => "--:6:4:-:1  \@P1 LDG.E.$vec_size T8, [track + 4x<8*32 * $dtype_size>];\n",
        ),

        j1c11 => "--:-:-:Y:5      BAR.SYNC 0;\n" .
                 "--:-:-:-:1  \@P0 IADD readFs, readFs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD readIs, readIs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeS, writeS,  swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD swapBuf, RZ,    -swapBuf;\n",

        j1c31 => "--:-:-:Y:5  \@P0 BRA.U LOAD_LOOP;\n",
    );

    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    foreach my $xy ([0,0],[0,1],[2,1],[2,0],[2,4],[2,5],[0,5],[0,4])
    {
        my ($x, $y) = @$xy;
        push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
    }
    my $out;
    foreach my $j (0 .. 1)
    {
        foreach my $c (0 .. 31)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';

            my $wait   = $c == 0 ? "01" : '--';

            my $stall  = $ins =~ /^[^\n]*(?:LDS|I2I|I2F|F2I|F2F|LDG|STS|BAR|BRA)/ ? 0 : 1;

            my $ctrl   = "$wait:-:-:-:$stall";

            $out .= sprintf "%s      FFMA clx%dy%d, jl%dIx%d, jl%dFy%d, clx%dy%d;\n%s", $ctrl,  $x,$y,  $j,$x,  $j,$y,  $x,$y,  $ins;
        }
    }
    return $out;
+]

--:-:1:-:2      S2R Tid, SR_TID.X;
<SCHEDULE_BLOCK>
--:-:-:-:1      MOV alpha16, param_alpha;

01:-:-:-:1      LOP.AND  Tid32_2,  Tid,    -32;
--:-:-:-:1      SHR.U32  Tid32_2,  Tid32_2, 2;

// readIs = ((tid & -32) >> 2) | ((tid >> 1) & 7)
--:-:-:-:1      BFE.U32 readIs, Tid,    0x301; // 3 bits at position 1
--:-:-:-:1      LOP.OR  readIs, readIs, Tid32_2;
--:-:-:-:1      SHL     readIs, readIs, 4;

// readFs = ((tid & 16) >> 3) | (tid & 1)
--:-:-:-:1      LOP.AND Tid1,   Tid,    1;
--:-:-:-:1      LOP.AND readFs, Tid,    16;
--:-:-:-:1      SHR.U32 readFs, readFs, 3;
--:-:-:-:1      IADD    readFs, readFs, Tid1;
--:-:-:-:1      SHL     readFs, readFs, 3;

// writeCs = readFs * 32*36 + readIs;
--:-:-:-:1      XMAD write16Cs, readFs, 1x<32*36>, readIs;
</SCHEDULE_BLOCK>

--:-:-:-:1      FMUL shuffle16_x0y0, clx0y0, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y0, clx1y0, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y0, clx2y0, alpha16;
--:-:-:-:1      FMUL shuffle16_x3y0, clx3y0, alpha16;
--:-:-:-:1      FMUL shuffle16_x0y1, clx0y2, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y1, clx1y2, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y1, clx2y2, alpha16;
--:-:-:-:0      FMUL shuffle16_x3y1, clx3y2, alpha16;
--:-:-:-:4      STS.128 [write16Cs+4x<0*32*36 + 00>], shuffle16_x0y0;
--:-:-:-:d      STS.128 [write16Cs+4x<1*32*36 + 00>], shuffle16_x0y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:1      FMUL shuffle16_x0y0, clx0y1, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y0, clx1y1, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y0, clx2y1, alpha16;
--:-:-:-:1      FMUL shuffle16_x3y0, clx3y1, alpha16;
--:-:-:-:1      FMUL shuffle16_x0y1, clx0y3, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y1, clx1y3, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y1, clx2y3, alpha16;
--:-:-:-:0      FMUL shuffle16_x3y1, clx3y3, alpha16;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      STS.128 [write16Cs+4x<0*32*36 + 00>], shuffle16_x0y0;
--:-:-:-:d      STS.128 [write16Cs+4x<1*32*36 + 00>], shuffle16_x0y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:1      FMUL shuffle16_x0y0, clx0y4, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y0, clx1y4, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y0, clx2y4, alpha16;
--:-:-:-:1      FMUL shuffle16_x3y0, clx3y4, alpha16;
--:-:-:-:1      FMUL shuffle16_x0y1, clx0y6, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y1, clx1y6, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y1, clx2y6, alpha16;
--:-:-:-:0      FMUL shuffle16_x3y1, clx3y6, alpha16;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      STS.128 [write16Cs+4x<0*32*36 + 00>], shuffle16_x0y0;
--:-:-:-:d      STS.128 [write16Cs+4x<1*32*36 + 00>], shuffle16_x0y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:1      FMUL shuffle16_x0y0, clx0y5, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y0, clx1y5, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y0, clx2y5, alpha16;
--:-:-:-:1      FMUL shuffle16_x3y0, clx3y5, alpha16;
--:-:-:-:1      FMUL shuffle16_x0y1, clx0y7, alpha16;
--:-:-:-:1      FMUL shuffle16_x1y1, clx1y7, alpha16;
--:-:-:-:1      FMUL shuffle16_x2y1, clx2y7, alpha16;
--:-:-:-:0      FMUL shuffle16_x3y1, clx3y7, alpha16;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      STS.128 [write16Cs+4x<0*32*36 + 00>], shuffle16_x0y0;
--:-:-:-:d      STS.128 [write16Cs+4x<1*32*36 + 00>], shuffle16_x0y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:5      EXIT;

COMPUTE_FINISH:

--:-:1:-:2      S2R tid_128, SR_TID.X;
<SCHEDULE_BLOCK>

--:-:-:-:1      MOV alpha, param_alpha;

01:-:-:-:1      IADD tid_128, tid_128, -128;

--:-:-:-:1      ISETP.GE.AND P4, PT, tid_128, 256, PT;


// readIs = ((tid & -16) >> 1) | ((tid >> 1) & 3)
--:-:-:-:1      LOP.AND  tid_16,   tid_128, -16;
--:-:-:-:1      SHR.U32  tid_16,   tid_16,   1;
--:-:-:-:1      BFE.U32  readIs2,  tid_128,  0x201; // 2 bits at position 1
--:-:-:-:1      LOP.OR   readIs2,  readIs2,  tid_16;
--:-:-:-:1      ISCADD   readIs2,  readIs2,  4x<32*4>, 4;

// readFs = ((tid &  8) >> 2) | (tid & 1)
--:-:-:-:1      LOP.AND  Tid_1,   tid_128, 1;
--:-:-:-:1      LOP.AND  readFs2, tid_128, 8;
--:-:-:-:1      SHR.U32  readFs2, readFs2, 2;
--:-:-:-:1      IADD     readFs2, readFs2, Tid_1;
--:-:-:-:1      SHL      readFs2, readFs2, 3;

// writeCs = readFs * 32*36 + readIs;
--:-:-:-:0      XMAD writeCs, readFs2, 1x<32*36>, readIs2;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P4 BRA.U SKIP0;

--:-:2:-:1      LDS idxX, [addr_idx_X];
--:-:3:-:1      LDS idxY, [addr_idx_Y];
--:-:1:-:1      S2R idxN,  SR_CTAID.Y;
--:-:4:-:1      LDS idxK, [addr_idx_K];
<SCHEDULE_BLOCK>

--:-:-:-:1      MOV beta,  param_beta;
--:-:-:-:1      MOV flags, param_flags;

--:-:-:-:1      LOP.AND tid_31, tid_128, 31;
--:-:-:-:1      SHR.U32 tid_32, tid_128,  5;

// readCs = tid>>5 * 32*36 + tid & 31
--:-:-:-:1      XMAD readCs, tid_32, 1x<32*36>, tid_31;
--:-:-:-:1      SHL  readCs, readCs, 2;

// n = idxN*32 + tid & maskN
--:-:-:-:1      LOP.AND n, tid_31, param_maskN;
01:-:-:-:1      ISCADD  n, idxN, n, 5;

// Superblock offset
// idxX <<= shiftX
// idxX <<= shiftY
02:-:-:-:1      SHL idxX, idxX, param_shiftX;
04:-:-:-:1      SHL idxY, idxY, param_shiftY;

// Get this threads offset within the superblock
--:-:-:-:1      BFE.U32 q, tid_31, param_superX;
--:-:-:-:1      BFE.U32 p, tid_31, param_superY;
--:-:-:-:1      ISCADD q, q, idxX, 2;
--:-:-:-:1      ISCADD p, p, idxY, 2;

// k = idxK*32 + tid_32<<1
--:-:-:-:1      SHL tid_32, tid_32,   1;
08:-:-:-:1      ISCADD k, idxK, tid_32, 5;

// Out = k*PQN + p*QN + q*N + n
--:-:-:-:1      XMAD      offsetO, q, param_N,    n;
--:-:-:-:1      XMAD.LO2C offsetO, p, param_QN,   offsetO;
--:-:-:-:1      XMAD.LO2C offsetO, k, param_PQN,  offsetO;
--:-:-:-:1      LEA      out00.CC, offsetO, param_O[0],     [+ dtype_shift() +];
--:-:-:-:1      LEA.HI.X out01,    offsetO, param_O[1], RZ, [+ dtype_shift() +];

--:-:-:-:1      LOP.AND.Z  P5, RZ, flags, 1;
--:-:-:-:1      ISETP.LT.AND P6, PT, n, param_N, PT;

--:-:-:-:1      IADD z1, q, 1;
--:-:-:-:1      IADD z2, q, 2;
--:-:-:-:1      IADD z3, q, 3;

--:-:-:-:1      ISETP.LT.AND P0, PT, q,  param_Q, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, z1, param_Q, P5;
--:-:-:-:1      ISETP.LT.AND P2, PT, z2, param_Q, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, z3, param_Q, P5;
--:-:-:-:1      ISETP.GE.AND P0, PT, q,  RZ, P0;
--:-:-:-:1      ISETP.GE.AND P1, PT, z1, RZ, P1;
--:-:-:-:1      ISETP.GE.AND P2, PT, z2, RZ, P2;
--:-:-:-:1      ISETP.GE.AND P3, PT, z3, RZ, P3;
--:-:-:-:1      P2R mask_q, PR, RZ, 0x0f;

--:-:-:-:1      IADD z1, p, 1;
--:-:-:-:1      IADD z2, p, 2;
--:-:-:-:1      IADD z3, p, 3;
--:-:-:-:1      ISETP.LT.AND P0, PT, p,  param_P, P6;
--:-:-:-:1      ISETP.LT.AND P1, PT, z1, param_P, P6;
--:-:-:-:1      ISETP.LT.AND P2, PT, z2, param_P, P6;
--:-:-:-:1      ISETP.LT.AND P3, PT, z3, param_P, P6;
--:-:-:-:1      ISETP.GE.AND P0, PT, p,  RZ, P0;
--:-:-:-:1      ISETP.GE.AND P1, PT, z1, RZ, P1;
--:-:-:-:1      ISETP.GE.AND P2, PT, z2, RZ, P2;
--:-:-:-:1      ISETP.GE.AND P3, PT, z3, RZ, P3;

--:-:-:-:1      SEL preds, mask_q, RZ, P0;
--:-:-:-:1  @P1 BFI preds, mask_q, 0x404, preds;
--:-:-:-:1  @P2 BFI preds, mask_q, 0x408, preds;
--:-:-:-:1  @P3 BFI preds, mask_q, 0x40c, preds;

[+
    our $bsum;
    return $bsum ? q{
--:-:-:-:1      ISETP.EQ.AND P5, PT, tid_31, RZ, PT;
--:-:-:-:1      LEA      Sum0.CC, k, param_Sum[0],     2;
--:-:-:-:1      LEA.HI.X Sum1,    k, param_Sum[1], RZ, 2;
    } : q{
--:-:-:-:1      LOP.AND.NZ P5, RZ, flags, 2;};
+]

</SCHEDULE_BLOCK>

SKIP0:

<SCHEDULE_BLOCK>
--:-:-:-:1      IADD     out10.CC, out00, param_Np;
--:-:-:-:1      IADD.X   out11,    out01, RZ;
--:-:-:-:1      IADD     out20.CC, out10, param_Np;
--:-:-:-:1      IADD.X   out21,    out11, RZ;
--:-:-:-:1      IADD     out30.CC, out20, param_Np;
--:-:-:-:1      IADD.X   out31,    out21, RZ;

--:-:-:-:1      FMUL shuffle_x0y0, ccx0y0, alpha;
--:-:-:-:1      FMUL shuffle_x1y0, ccx1y0, alpha;
--:-:-:-:1      FMUL shuffle_x2y0, ccx2y0, alpha;
--:-:-:-:1      FMUL shuffle_x3y0, ccx3y0, alpha;
--:-:-:-:1      FMUL shuffle_x4y0, ccx4y0, alpha;
--:-:-:-:1      FMUL shuffle_x5y0, ccx5y0, alpha;
--:-:-:-:1      FMUL shuffle_x6y0, ccx6y0, alpha;
--:-:-:-:1      FMUL shuffle_x7y0, ccx7y0, alpha;
--:-:-:-:1      FMUL shuffle_x0y1, ccx0y2, alpha;
--:-:-:-:1      FMUL shuffle_x1y1, ccx1y2, alpha;
--:-:-:-:1      FMUL shuffle_x2y1, ccx2y2, alpha;
--:-:-:-:1      FMUL shuffle_x3y1, ccx3y2, alpha;
--:-:-:-:1      FMUL shuffle_x4y1, ccx4y2, alpha;
--:-:-:-:1      FMUL shuffle_x5y1, ccx5y2, alpha;
--:-:-:-:1      FMUL shuffle_x6y1, ccx6y2, alpha;
--:-:-:-:1      FMUL shuffle_x7y1, ccx7y2, alpha;

--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 00>], shuffle_x0y0;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 16>], shuffle_x4y0;
--:-:-:-:1      STS.128 [writeCs+4x<1*32*36 + 00>], shuffle_x0y1;
--:-:-:-:d      STS.128 [writeCs+4x<1*32*36 + 16>], shuffle_x4y1;
</SCHEDULE_BLOCK>
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:5  @P4 BRA.U SKIP1;
--:-:-:-:5      CAL OUTPUT_TRANSFORM;
10:-:-:-:5      IADD   out00.CC, out00, param_PQN1_QN3p;
--:-:-:-:1      IADD k, k, 1;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:6      IADD   out10.CC, out10, param_PQN1_QN3p;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:6      IADD   out20.CC, out20, param_PQN1_QN3p;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:6      IADD   out30.CC, out30, param_PQN1_QN3p;
--:-:-:-:1      IADD.X out31,    out31, RZ;
[+
    our $bsum; return $bsum ? q{
01:-:-:-:6      IADD   Sum0.CC, Sum0, 4x<1>;
--:-:-:-:1      IADD.X Sum1,    Sum1, RZ;} : '';
+]

SKIP1:

--:-:-:-:0      FMUL shuffle_x0y0, ccx0y1, alpha;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      FMUL shuffle_x1y0, ccx1y1, alpha;
--:-:-:-:1      FMUL shuffle_x2y0, ccx2y1, alpha;
--:-:-:-:1      FMUL shuffle_x3y0, ccx3y1, alpha;
--:-:-:-:1      FMUL shuffle_x4y0, ccx4y1, alpha;
--:-:-:-:1      FMUL shuffle_x5y0, ccx5y1, alpha;
--:-:-:-:1      FMUL shuffle_x6y0, ccx6y1, alpha;
--:-:-:-:0      FMUL shuffle_x7y0, ccx7y1, alpha;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 00>], shuffle_x0y0;
--:-:-:-:1      FMUL shuffle_x0y1, ccx0y3, alpha;
--:-:-:-:1      FMUL shuffle_x1y1, ccx1y3, alpha;
--:-:-:-:1      FMUL shuffle_x2y1, ccx2y3, alpha;
--:-:-:-:0      FMUL shuffle_x3y1, ccx3y3, alpha;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 16>], shuffle_x4y0;
--:-:-:-:1      FMUL shuffle_x4y1, ccx4y3, alpha;
--:-:-:-:1      FMUL shuffle_x5y1, ccx5y3, alpha;
--:-:-:-:1      FMUL shuffle_x6y1, ccx6y3, alpha;
--:-:-:-:0      FMUL shuffle_x7y1, ccx7y3, alpha;
--:-:-:-:4      STS.128 [writeCs+4x<1*32*36 + 00>], shuffle_x0y1;
--:-:-:-:d      STS.128 [writeCs+4x<1*32*36 + 16>], shuffle_x4y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:5  @P4 BRA.U SKIP2;
--:-:-:-:5      CAL OUTPUT_TRANSFORM;
10:-:-:-:5      IADD   out00.CC, out00, param_PQN15_QN3p;
--:-:-:-:1      IADD k, k, 15;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:6      IADD   out10.CC, out10, param_PQN15_QN3p;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:6      IADD   out20.CC, out20, param_PQN15_QN3p;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:6      IADD   out30.CC, out30, param_PQN15_QN3p;
--:-:-:-:1      IADD.X out31,    out31, RZ;
[+
    our $bsum; return $bsum ? q{
01:-:-:-:6      IADD   Sum0.CC, Sum0, 4x<15>;
--:-:-:-:1      IADD.X Sum1,    Sum1, RZ;} : '';
+]
SKIP2:

--:-:-:-:0      FMUL shuffle_x0y0, ccx0y4, alpha;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      FMUL shuffle_x1y0, ccx1y4, alpha;
--:-:-:-:1      FMUL shuffle_x2y0, ccx2y4, alpha;
--:-:-:-:1      FMUL shuffle_x3y0, ccx3y4, alpha;
--:-:-:-:1      FMUL shuffle_x4y0, ccx4y4, alpha;
--:-:-:-:1      FMUL shuffle_x5y0, ccx5y4, alpha;
--:-:-:-:1      FMUL shuffle_x6y0, ccx6y4, alpha;
--:-:-:-:0      FMUL shuffle_x7y0, ccx7y4, alpha;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 00>], shuffle_x0y0;
--:-:-:-:1      FMUL shuffle_x0y1, ccx0y6, alpha;
--:-:-:-:1      FMUL shuffle_x1y1, ccx1y6, alpha;
--:-:-:-:1      FMUL shuffle_x2y1, ccx2y6, alpha;
--:-:-:-:0      FMUL shuffle_x3y1, ccx3y6, alpha;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 16>], shuffle_x4y0;
--:-:-:-:1      FMUL shuffle_x4y1, ccx4y6, alpha;
--:-:-:-:1      FMUL shuffle_x5y1, ccx5y6, alpha;
--:-:-:-:1      FMUL shuffle_x6y1, ccx6y6, alpha;
--:-:-:-:0      FMUL shuffle_x7y1, ccx7y6, alpha;
--:-:-:-:4      STS.128 [writeCs+4x<1*32*36 + 00>], shuffle_x0y1;
--:-:-:-:d      STS.128 [writeCs+4x<1*32*36 + 16>], shuffle_x4y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:5  @P4 BRA.U SKIP3;
--:-:-:-:5      CAL OUTPUT_TRANSFORM;
10:-:-:-:5      IADD   out00.CC, out00, param_PQN1_QN3p;
--:-:-:-:1      IADD k, k, 1;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:6      IADD   out10.CC, out10, param_PQN1_QN3p;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:6      IADD   out20.CC, out20, param_PQN1_QN3p;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:6      IADD   out30.CC, out30, param_PQN1_QN3p;
--:-:-:-:1      IADD.X out31,    out31, RZ;
[+
    our $bsum; return $bsum ? q{
01:-:-:-:6      IADD   Sum0.CC, Sum0, 4x<1>;
--:-:-:-:1      IADD.X Sum1,    Sum1, RZ;} : '';
+]
SKIP3:

--:-:-:-:0      FMUL shuffle_x0y0, ccx0y5, alpha;
--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      FMUL shuffle_x1y0, ccx1y5, alpha;
--:-:-:-:1      FMUL shuffle_x2y0, ccx2y5, alpha;
--:-:-:-:1      FMUL shuffle_x3y0, ccx3y5, alpha;
--:-:-:-:1      FMUL shuffle_x4y0, ccx4y5, alpha;
--:-:-:-:1      FMUL shuffle_x5y0, ccx5y5, alpha;
--:-:-:-:1      FMUL shuffle_x6y0, ccx6y5, alpha;
--:-:-:-:0      FMUL shuffle_x7y0, ccx7y5, alpha;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 00>], shuffle_x0y0;
--:-:-:-:1      FMUL shuffle_x0y1, ccx0y7, alpha;
--:-:-:-:1      FMUL shuffle_x1y1, ccx1y7, alpha;
--:-:-:-:1      FMUL shuffle_x2y1, ccx2y7, alpha;
--:-:-:-:0      FMUL shuffle_x3y1, ccx3y7, alpha;
--:-:-:-:1      STS.128 [writeCs+4x<0*32*36 + 16>], shuffle_x4y0;
--:-:-:-:1      FMUL shuffle_x4y1, ccx4y7, alpha;
--:-:-:-:1      FMUL shuffle_x5y1, ccx5y7, alpha;
--:-:-:-:1      FMUL shuffle_x6y1, ccx6y7, alpha;
--:-:-:-:0      FMUL shuffle_x7y1, ccx7y7, alpha;
--:-:-:-:4      STS.128 [writeCs+4x<1*32*36 + 00>], shuffle_x0y1;
--:-:-:-:d      STS.128 [writeCs+4x<1*32*36 + 16>], shuffle_x4y1;
--:-:-:-:5      BAR.SYNC 0;

--:-:-:-:5  @P4 BRA.U SKIP4;
--:-:-:-:5      CAL OUTPUT_TRANSFORM;
SKIP4:

--:-:-:-:5      EXIT;

OUTPUT_TRANSFORM:

--:-:-:-:0      ISETP.LT.AND P6, PT, k, param_K, PT;

[+
    my $out;
    foreach my $i (0 .. 2)
    {
        foreach my $j (0 .. 5)
        {
            my $b = $i + 1;
            $out .= "--:-:$b:-:1      LDS m$j$i, [readCs + 4x<($j*6+$i)*32>];\n";
        }
    }
    return $out;
+]
<SCHEDULE_BLOCK>
[+
    my $out;
    foreach my $i (0 .. 2)
    {
        my $w = sprintf "%02x", 1 << $i;
        $out .= qq{
<ORDERED>
$w:-:-:-:1      FADD t0$i, m1$i,  m2$i;
--:-:-:-:1      FADD t1$i, m1$i, -m2$i;
--:-:-:-:1      FADD t2$i, m3$i, -m4$i;
--:-:-:-:1      FADD t3$i, m3$i,  m4$i;
--:-:-:-:1      FADD w0$i, t0$i,  m0$i;
--:-:-:-:1      FFMA w3$i, t2$i,  8.0, t1$i;
--:-:-:-:1      FFMA w1$i, t2$i,  2.0, t1$i;
--:-:-:-:1      FFMA w2$i, t3$i,  4.0, t0$i;
--:-:-:-:1      FADD w0$i, w0$i,  t3$i;
--:-:-:-:1      FADD w3$i, w3$i,  m5$i;
</ORDERED>
        };
    }
    foreach my $i (3 .. 5)
    {
        foreach my $j (0 .. 5)
        {
            my $b = $i + 1;
            $out .= "--:-:$b:-:1      LDS m$j$i, [readCs + 4x<($j*6+$i)*32>];\n";
        }
    }
    return $out;
+]
</SCHEDULE_BLOCK>

<SCHEDULE_BLOCK>

[+
    my $out;

    foreach my $i (3 .. 5)
    {
        my $w = sprintf "%02x", 1 << $i;
        $out .= qq{
<ORDERED>
$w:-:-:-:1      FADD t0$i, m1$i,  m2$i;
--:-:-:-:1      FADD t1$i, m1$i, -m2$i;
--:-:-:-:1      FADD t2$i, m3$i, -m4$i;
--:-:-:-:1      FADD t3$i, m3$i,  m4$i;
--:-:-:-:1      FADD w0$i, t0$i,  m0$i;
--:-:-:-:1      FFMA w3$i, t2$i,  8.0, t1$i;
--:-:-:-:1      FFMA w1$i, t2$i,  2.0, t1$i;
--:-:-:-:1      FFMA w2$i, t3$i,  4.0, t0$i;
--:-:-:-:1      FADD w0$i, w0$i,  t3$i;
--:-:-:-:1      FADD w3$i, w3$i,  m5$i;
</ORDERED>
        };
    }
    return $out;
+]
--:-:-:-:1  @P6 R2P PR, preds, 0x0f;
--:-:-:-:1 @!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      SHF.R.U64 preds, preds, 4, preds;
</SCHEDULE_BLOCK>

<SCHEDULE_BLOCK>
[+
    my $out;
    our ($convert_out, $bsum, $beta);
    if ($bsum)
    {
        $out .= q{
--:-:-:-:1      MOV  sum0, RZ;
--:-:-:-:1      MOV  sum1, RZ;
--:-:-:-:1      MOV  sum2, RZ;
--:-:-:-:1      MOV  sum3, RZ;};
    }
    foreach my $i (0 .. 3)
    {
        $out .= qq{
--:-:-:-:1      FADD r${i}0, w${i}1,  w${i}2;
--:-:-:-:1      FADD r${i}1, w${i}1, -w${i}2;
--:-:-:-:1      FADD r${i}2, w${i}3, -w${i}4;
--:-:-:-:1      FADD r${i}3, w${i}3,  w${i}4;
--:-:-:-:1      FADD s${i}0, r${i}0,  w${i}0;
--:-:-:-:1      FFMA s${i}3, r${i}2,  8.0, r${i}1;
--:-:-:-:1      FFMA s${i}1, r${i}2,  2.0, r${i}1;
--:-:-:-:1      FFMA s${i}2, r${i}3,  4.0, r${i}0;
--:-:-:-:1      FADD s${i}0, s${i}0,  r${i}3;
--:-:-:-:1      FADD s${i}3, s${i}3,  w${i}5;};
        if ($bsum)
        {
            my ($dir, $amt) = $i == 2 ? ('L','12') : ('R','4');
            $out .= qq{
--:-:-:-:1  \@P0 FADD sum0, sum0, s${i}0;
--:-:-:-:1  \@P1 FADD sum1, sum1, s${i}1;
--:-:-:-:1  \@P2 FADD sum2, sum2, s${i}2;
--:-:-:-:1  \@P3 FADD sum3, sum3, s${i}3;
--:-:-:-:1  \@P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.$dir.U64 preds, preds, $amt, preds;
--:-:-:-:1 \@!P6 R2P PR, RZ,    0x0f;};
        }
        elsif (!$beta)
        {
            $out .= qq{
--:-:-:-:1  \@P5 FMNMX s${i}0, s${i}0, RZ, !PT;
--:-:-:-:1  \@P5 FMNMX s${i}1, s${i}1, RZ, !PT;
--:-:-:-:1  \@P5 FMNMX s${i}2, s${i}2, RZ, !PT;
--:-:-:-:1  \@P5 FMNMX s${i}3, s${i}3, RZ, !PT;};
        }
        if ($convert_out && !$beta)
        {
            my $b = $i + 1;
            $out .= qq{
--:-:$b:-:1      F2F.F16.F32 s${i}0, s${i}0;
--:-:$b:-:1      F2F.F16.F32 s${i}1, s${i}1;
--:-:$b:-:1      F2F.F16.F32 s${i}2, s${i}2;
--:-:$b:-:1      F2F.F16.F32 s${i}3, s${i}3;};
        }
    }
    if ($bsum)
    {
        $out .= q{
--:-:-:-:1      FADD sum0, sum0, sum1;
--:-:-:-:1      FADD sum2, sum2, sum3;
--:-:-:-:4      FADD sum0, sum0, sum2;};
    }
    return $out;
+]
</SCHEDULE_BLOCK>

[+
    our ($beta, $dtype, $convert_out);
    my $out;
    if ($beta)
    {
        $out .= qq{
<SCHEDULE_BLOCK>
<ORDERED>
--:-:-:-:1 \@!P0 MOV b00, RZ;
--:-:-:-:1  \@P0 LDG.E.CG$dtype b00, [out0];
--:-:-:-:1 \@!P1 MOV b01, RZ;
--:5:-:-:1  \@P1 LDG.E.CG$dtype b01, [out1];
--:-:-:-:1 \@!P2 MOV b02, RZ;
--:-:-:-:1  \@P2 LDG.E.CG$dtype b02, [out2];
--:-:-:-:1 \@!P3 MOV b03, RZ;
--:6:1:-:1  \@P3 LDG.E.CG$dtype b03, [out3];

10:-:-:-:1      IADD   out00.CC, out00, param_QNp;
--:-:-:-:1  \@P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.R.U64 preds, preds, 4, preds;
--:-:-:-:1 \@!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:1      IADD   out10.CC, out10, param_QNp;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:1      IADD   out20.CC, out20, param_QNp;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:1      IADD   out30.CC, out30, param_QNp;
--:-:-:-:1      IADD.X out31,    out31, RZ;

--:-:-:-:1 \@!P0 MOV b10, RZ;
--:-:-:-:1  \@P0 LDG.E.CG$dtype b10, [out0];
--:-:-:-:1 \@!P1 MOV b11, RZ;
--:5:-:-:1  \@P1 LDG.E.CG$dtype b11, [out1];
--:-:-:-:1 \@!P2 MOV b12, RZ;
--:-:-:-:1  \@P2 LDG.E.CG$dtype b12, [out2];
--:-:-:-:1 \@!P3 MOV b13, RZ;
--:6:2:-:1  \@P3 LDG.E.CG$dtype b13, [out3];

10:-:-:-:1      IADD   out00.CC, out00, param_QNp;
--:-:-:-:1  \@P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.R.U64 preds, preds, 4, preds;
--:-:-:-:1 \@!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:1      IADD   out10.CC, out10, param_QNp;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:1      IADD   out20.CC, out20, param_QNp;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:1      IADD   out30.CC, out30, param_QNp;
--:-:-:-:1      IADD.X out31,    out31, RZ;

--:-:-:-:1 \@!P0 MOV b20, RZ;
--:-:-:-:1  \@P0 LDG.E.CG$dtype b20, [out0];
--:-:-:-:1 \@!P1 MOV b21, RZ;
--:5:-:-:1  \@P1 LDG.E.CG$dtype b21, [out1];
--:-:-:-:1 \@!P2 MOV b22, RZ;
--:-:-:-:1  \@P2 LDG.E.CG$dtype b22, [out2];
--:-:-:-:1 \@!P3 MOV b23, RZ;
--:6:3:-:1  \@P3 LDG.E.CG$dtype b23, [out3];

10:-:-:-:1      IADD   out00.CC, out00, param_QNp;
--:-:-:-:1  \@P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.L.U64 preds, preds, 12, preds;
--:-:-:-:1 \@!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:1      IADD   out10.CC, out10, param_QNp;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:1      IADD   out20.CC, out20, param_QNp;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:1      IADD   out30.CC, out30, param_QNp;
--:-:-:-:1      IADD.X out31,    out31, RZ;

--:-:-:-:1 \@!P0 MOV b30, RZ;
--:-:-:-:1  \@P0 LDG.E.CG$dtype b30, [out0];
--:-:-:-:1 \@!P1 MOV b31, RZ;
--:5:-:-:1  \@P1 LDG.E.CG$dtype b31, [out1];
--:-:-:-:1 \@!P2 MOV b32, RZ;
--:-:-:-:1  \@P2 LDG.E.CG$dtype b32, [out2];
--:-:-:-:1 \@!P3 MOV b33, RZ;
--:6:4:-:1  \@P3 LDG.E.CG$dtype b33, [out3];

10:-:-:-:1      IADD   out00.CC, out00, -param_QN3p;
--:-:-:-:1  \@P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.R.U64 preds, preds, 4, preds;
--:-:-:-:1 \@!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, -RZ;
--:-:-:-:1      IADD   out10.CC, out10, -param_QN3p;
--:-:-:-:1      IADD.X out11,    out11, -RZ;
20:-:-:-:1      IADD   out20.CC, out20, -param_QN3p;
--:-:-:-:1      IADD.X out21,    out21, -RZ;
--:-:-:-:1      IADD   out30.CC, out30, -param_QN3p;
--:-:-:-:1      IADD.X out31,    out31, -RZ;
</ORDERED>
</SCHEDULE_BLOCK>};

        if ($convert_out)
        {
            $out .= q{
01:-:-:-:1      F2F.F32.F16 b00, b00;
--:-:-:-:1      F2F.F32.F16 b01, b01;
--:-:-:-:1      F2F.F32.F16 b02, b02;
--:-:1:-:1      F2F.F32.F16 b03, b03;
02:-:-:-:1      F2F.F32.F16 b10, b10;
--:-:-:-:1      F2F.F32.F16 b11, b11;
--:-:-:-:1      F2F.F32.F16 b12, b12;
--:-:2:-:1      F2F.F32.F16 b13, b13;
04:-:-:-:1      F2F.F32.F16 b20, b20;
--:-:-:-:1      F2F.F32.F16 b21, b21;
--:-:-:-:1      F2F.F32.F16 b22, b22;
--:-:3:-:1      F2F.F32.F16 b23, b23;
08:-:-:-:1      F2F.F32.F16 b30, b30;
--:-:-:-:1      F2F.F32.F16 b31, b31;
--:-:-:-:1      F2F.F32.F16 b32, b32;
--:-:4:-:1      F2F.F32.F16 b33, b33;
<SCHEDULE_BLOCK>
01:-:-:-:1      FFMA s00, b00, beta, s00;
--:-:-:-:1      FFMA s01, b01, beta, s01;
--:-:-:-:1      FFMA s02, b02, beta, s02;
--:-:-:-:1      FFMA s03, b03, beta, s03;
02:-:-:-:1      FFMA s10, b10, beta, s10;
--:-:-:-:1      FFMA s11, b11, beta, s11;
--:-:-:-:1      FFMA s12, b12, beta, s12;
--:-:-:-:1      FFMA s13, b13, beta, s13;
04:-:-:-:1      FFMA s20, b20, beta, s20;
--:-:-:-:1      FFMA s21, b21, beta, s21;
--:-:-:-:1      FFMA s22, b22, beta, s22;
--:-:-:-:1      FFMA s23, b23, beta, s23;
08:-:-:-:1      FFMA s30, b30, beta, s30;
--:-:-:-:1      FFMA s31, b31, beta, s31;
--:-:-:-:1      FFMA s32, b32, beta, s32;
--:-:-:-:1      FFMA s33, b33, beta, s33;
--:-:-:-:1      F2F.F16.F32 s00, s00;
--:-:-:-:1      F2F.F16.F32 s01, s01;
--:-:-:-:1      F2F.F16.F32 s02, s02;
--:-:1:-:1      F2F.F16.F32 s03, s03;
--:-:-:-:1      F2F.F16.F32 s10, s10;
--:-:-:-:1      F2F.F16.F32 s11, s11;
--:-:-:-:1      F2F.F16.F32 s12, s12;
--:-:2:-:1      F2F.F16.F32 s13, s13;
--:-:-:-:1      F2F.F16.F32 s20, s20;
--:-:-:-:1      F2F.F16.F32 s21, s21;
--:-:-:-:1      F2F.F16.F32 s22, s22;
--:-:3:-:1      F2F.F16.F32 s23, s23;
--:-:-:-:1      F2F.F16.F32 s30, s30;
--:-:-:-:1      F2F.F16.F32 s31, s31;
--:-:-:-:1      F2F.F16.F32 s32, s32;
--:-:4:-:1      F2F.F16.F32 s33, s33;
</SCHEDULE_BLOCK>};
        }
        else
        {
            $out .= q{
01:-:-:-:1  @P0 FFMA s00, b00, beta, s00;
--:-:-:-:1  @P1 FFMA s01, b01, beta, s01;
--:-:-:-:1  @P2 FFMA s02, b02, beta, s02;
--:-:-:-:0  @P3 FFMA s03, b03, beta, s03;};
        }
    }
    return $out;
+]

01:-:-:-:1  @P0 STG.E.CG[+ dtype() +] [out0], s00;
--:5:-:-:1  @P1 STG.E.CG[+ dtype() +] [out1], s01;
--:-:-:-:1  @P2 STG.E.CG[+ dtype() +] [out2], s02;
--:6:-:-:1  @P3 STG.E.CG[+ dtype() +] [out3], s03;

[+ our $bsum; return $bsum ? q{--:-:1:-:1      SHFL.BFLY PT, sum1, sum0, 1, 0x1f;} : ''; +]

10:-:-:-:1      IADD   out00.CC, out00, param_QNp;
--:-:-:-:1  @P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.R.U64 preds, preds, 4, preds;
--:-:-:-:3 @!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:6      IADD   out10.CC, out10, param_QNp;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:6      IADD   out20.CC, out20, param_QNp;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:6      IADD   out30.CC, out30, param_QNp;
--:-:-:-:1      IADD.X out31,    out31, RZ;

[+ our $bsum; return $bsum ? q{01:-:-:-:0      FADD sum0, sum1, sum0;} : ''; +]
[+
    our ($beta, $convert_out);
    return $beta && !$convert_out ? q{
02:-:-:-:1  @P0 FFMA s10, b10, beta, s10;
--:-:-:-:1  @P1 FFMA s11, b11, beta, s11;
--:-:-:-:1  @P2 FFMA s12, b12, beta, s12;
--:-:-:-:0  @P3 FFMA s13, b13, beta, s13;} : '';
+]
02:-:-:-:1  @P0 STG.E.CG[+ dtype() +] [out0], s10;
--:5:-:-:1  @P1 STG.E.CG[+ dtype() +] [out1], s11;
--:-:-:-:1  @P2 STG.E.CG[+ dtype() +] [out2], s12;
--:6:-:-:1  @P3 STG.E.CG[+ dtype() +] [out3], s13;

[+ our $bsum; return $bsum ? q{--:-:1:-:1      SHFL.BFLY PT, sum1, sum0, 2, 0x1f;} : ''; +]

10:-:-:-:1      IADD   out00.CC, out00, param_QNp;
--:-:-:-:1  @P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.R.U64 preds, preds, 4, preds;
--:-:-:-:3 @!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:6      IADD   out10.CC, out10, param_QNp;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:6      IADD   out20.CC, out20, param_QNp;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:6      IADD   out30.CC, out30, param_QNp;
--:-:-:-:1      IADD.X out31,    out31, RZ;

[+ our $bsum; return $bsum ? q{01:-:-:-:0      FADD sum0, sum1, sum0;} : ''; +]
[+
    our ($beta, $convert_out);
    return $beta && !$convert_out ? q{
04:-:-:-:1  @P0 FFMA s20, b20, beta, s20;
--:-:-:-:1  @P1 FFMA s21, b21, beta, s21;
--:-:-:-:1  @P2 FFMA s22, b22, beta, s22;
--:-:-:-:0  @P3 FFMA s23, b23, beta, s23;} : '';
+]
04:-:-:-:1  @P0 STG.E.CG[+ dtype() +] [out0], s20;
--:5:-:-:1  @P1 STG.E.CG[+ dtype() +] [out1], s21;
--:-:-:-:1  @P2 STG.E.CG[+ dtype() +] [out2], s22;
--:6:-:-:1  @P3 STG.E.CG[+ dtype() +] [out3], s23;

[+ our $bsum; return $bsum ? q{--:-:1:-:1      SHFL.BFLY PT, sum1, sum0, 4, 0x1f;} : ''; +]

10:-:-:-:1      IADD   out00.CC, out00, param_QNp;
--:-:-:-:1  @P6 R2P PR, preds, 0x0f;
--:-:-:-:1      SHF.L.U64 preds, preds, 12, preds;
--:-:-:-:3 @!P6 R2P PR, RZ,    0x0f;
--:-:-:-:1      IADD.X out01,    out01, RZ;
--:-:-:-:6      IADD   out10.CC, out10, param_QNp;
--:-:-:-:1      IADD.X out11,    out11, RZ;
20:-:-:-:6      IADD   out20.CC, out20, param_QNp;
--:-:-:-:1      IADD.X out21,    out21, RZ;
--:-:-:-:6      IADD   out30.CC, out30, param_QNp;
--:-:-:-:1      IADD.X out31,    out31, RZ;

[+ our $bsum; return $bsum ? q{01:-:-:-:0      FADD sum0, sum1, sum0;} : ''; +]
[+
    our ($beta, $convert_out);
    return $beta && !$convert_out ? q{
08:-:-:-:1  @P0 FFMA s30, b30, beta, s30;
--:-:-:-:1  @P1 FFMA s31, b31, beta, s31;
--:-:-:-:1  @P2 FFMA s32, b32, beta, s32;
--:-:-:-:0  @P3 FFMA s33, b33, beta, s33;} : '';
+]
08:-:-:-:1  @P0 STG.E.CG[+ dtype() +] [out0], s30;
--:5:-:-:1  @P1 STG.E.CG[+ dtype() +] [out1], s31;
--:-:-:-:1  @P2 STG.E.CG[+ dtype() +] [out2], s32;
--:6:-:-:1  @P3 STG.E.CG[+ dtype() +] [out3], s33;

[+ our $bsum; return $bsum ? q{
--:-:-:-:0      PSETP.AND.AND P0, PT, P5, P6, PT;
--:-:1:-:2      SHFL.BFLY PT, sum1, sum0,  8, 0x1f;
01:-:-:-:4      FADD sum0, sum1, sum0;
--:-:1:-:2      SHFL.BFLY PT, sum1, sum0, 16, 0x1f;
01:-:-:-:2      FADD sum0, sum1, sum0;

// bsum && k < K && tid31 == 0
--:1:-:-:1  @P0 RED.E.ADD.F32.FTZ.RN [Sum], sum0;} : '';
 +]

--:-:-:-:5      RET;
